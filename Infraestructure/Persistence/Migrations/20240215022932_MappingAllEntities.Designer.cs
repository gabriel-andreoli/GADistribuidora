// <auto-generated />
using System;
using GADistribuidora.Infraestructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GADistribuidora.Infraestructure.Persistence.Migrations
{
    [DbContext(typeof(GADistribuidoraContext))]
    [Migration("20240215022932_MappingAllEntities")]
    partial class MappingAllEntities
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GADistribuidora.Domain.Entities.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ClientType")
                        .HasColumnType("integer");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("IdentifierDocument")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("GADistribuidora.Domain.Entities.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("GADistribuidora.Domain.Entities.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("BornDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsCLT")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PIS")
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("GADistribuidora.Domain.Entities.EmployeeItinerary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ItineraryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("WasPresent")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ItineraryId");

                    b.ToTable("EmployeeItineraries");
                });

            modelBuilder.Entity("GADistribuidora.Domain.Entities.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateOfEmission")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<Guid>("ShippingCompanyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ShippingCompanyId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("GADistribuidora.Domain.Entities.Itinerary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<TimeSpan>("EndHour")
                        .HasColumnType("interval");

                    b.Property<TimeSpan>("InitHour")
                        .HasColumnType("interval");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<int>("TotalTraveled")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId");

                    b.ToTable("Itineraries");
                });

            modelBuilder.Entity("GADistribuidora.Domain.Entities.Lot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nr_Lot")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ProductionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Lots");
                });

            modelBuilder.Entity("GADistribuidora.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateOfOrder")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("GADistribuidora.Domain.Entities.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("uuid");

                    b.Property<int>("PaymentType")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("GADistribuidora.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Price")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ProductCategory")
                        .HasColumnType("integer");

                    b.Property<int>("UnitOfMeasurement")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("GADistribuidora.Domain.Entities.ProductOrder", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ProductId");

                    b.HasIndex("OrderId");

                    b.ToTable("ProductOrders");
                });

            modelBuilder.Entity("GADistribuidora.Domain.Entities.Purchase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("NR_NF")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.ToTable("Purchase");
                });

            modelBuilder.Entity("GADistribuidora.Domain.Entities.PurchaseProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PurchaseId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseId");

                    b.ToTable("PurchaseProduct");
                });

            modelBuilder.Entity("GADistribuidora.Domain.Entities.RouteItinerary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsConcluded")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ItineraryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Observations")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("ItineraryId");

                    b.ToTable("RouteItineraries");
                });

            modelBuilder.Entity("GADistribuidora.Domain.Entities.Sale", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateOfSale")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId")
                        .IsUnique();

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("GADistribuidora.Domain.Entities.ShippingCompany", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("ShippingCompanies");
                });

            modelBuilder.Entity("GADistribuidora.Domain.Entities.StockMovement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("MoveDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MoveQuantity")
                        .HasColumnType("integer");

                    b.Property<int>("MovementType")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("WarehouseLotId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WarehouseLotId");

                    b.ToTable("StockMovements");
                });

            modelBuilder.Entity("GADistribuidora.Domain.Entities.Supplier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("GADistribuidora.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("BornDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CPF")
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", null, t =>
                        {
                            t.Property("Email")
                                .HasColumnName("User_Email");
                        });
                });

            modelBuilder.Entity("GADistribuidora.Domain.Entities.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Brand")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<decimal?>("CapacityInCubicMeters")
                        .HasColumnType("numeric");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsBlocked")
                        .HasColumnType("boolean");

                    b.Property<string>("LicensePlate")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Model")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("YearOfManufacture")
                        .HasMaxLength(4)
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("GADistribuidora.Domain.Entities.Warehouse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Warehouses");
                });

            modelBuilder.Entity("GADistribuidora.Domain.Entities.WarehouseLot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LotId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("WarehouseId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("LotId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("WarehouseLots");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GADistribuidora.Domain.Entities.Client", b =>
                {
                    b.HasOne("GADistribuidora.Domain.Entities.Company", "Company")
                        .WithMany("Clients")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("GADistribuidora.Domain.Entities.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("ClientId")
                                .HasColumnType("uuid");

                            b1.Property<int?>("BuildingNumber")
                                .HasColumnType("integer")
                                .HasColumnName("BuildingNumber");

                            b1.Property<string>("City")
                                .HasMaxLength(35)
                                .HasColumnType("character varying(35)")
                                .HasColumnName("City");

                            b1.Property<string>("Complement")
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("Complement");

                            b1.Property<string>("Country")
                                .HasMaxLength(35)
                                .HasColumnType("character varying(35)")
                                .HasColumnName("Country");

                            b1.Property<string>("Neighborhood")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("Neighborhood");

                            b1.Property<string>("PostalCode")
                                .HasMaxLength(8)
                                .HasColumnType("character varying(8)")
                                .HasColumnName("PostalCode");

                            b1.Property<string>("State")
                                .HasMaxLength(35)
                                .HasColumnType("character varying(35)")
                                .HasColumnName("State");

                            b1.Property<string>("Street")
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("Street");

                            b1.HasKey("ClientId");

                            b1.ToTable("Clients");

                            b1.WithOwner()
                                .HasForeignKey("ClientId");
                        });

                    b.OwnsOne("GADistribuidora.Domain.Entities.ValueObjects.ContactInfo", "ContactInfo", b1 =>
                        {
                            b1.Property<Guid>("ClientId")
                                .HasColumnType("uuid");

                            b1.Property<string>("AreaCode")
                                .HasMaxLength(4)
                                .HasColumnType("character varying(4)")
                                .HasColumnName("AreaCode");

                            b1.Property<string>("CelPhone")
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("CelPhone");

                            b1.Property<string>("Email")
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("Email");

                            b1.Property<string>("Phone")
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("Phone");

                            b1.HasKey("ClientId");

                            b1.ToTable("Clients");

                            b1.WithOwner()
                                .HasForeignKey("ClientId");
                        });

                    b.Navigation("Address");

                    b.Navigation("Company");

                    b.Navigation("ContactInfo");
                });

            modelBuilder.Entity("GADistribuidora.Domain.Entities.Company", b =>
                {
                    b.OwnsOne("GADistribuidora.Domain.Entities.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("CompanyId")
                                .HasColumnType("uuid");

                            b1.Property<int?>("BuildingNumber")
                                .HasColumnType("integer")
                                .HasColumnName("BuildingNumber");

                            b1.Property<string>("City")
                                .HasMaxLength(35)
                                .HasColumnType("character varying(35)")
                                .HasColumnName("City");

                            b1.Property<string>("Complement")
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("Complement");

                            b1.Property<string>("Country")
                                .HasMaxLength(35)
                                .HasColumnType("character varying(35)")
                                .HasColumnName("Country");

                            b1.Property<string>("Neighborhood")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("Neighborhood");

                            b1.Property<string>("PostalCode")
                                .HasMaxLength(8)
                                .HasColumnType("character varying(8)")
                                .HasColumnName("PostalCode");

                            b1.Property<string>("State")
                                .HasMaxLength(35)
                                .HasColumnType("character varying(35)")
                                .HasColumnName("State");

                            b1.Property<string>("Street")
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("Street");

                            b1.HasKey("CompanyId");

                            b1.ToTable("Companies");

                            b1.WithOwner()
                                .HasForeignKey("CompanyId");
                        });

                    b.OwnsOne("GADistribuidora.Domain.Entities.ValueObjects.ContactInfo", "ContactInfo", b1 =>
                        {
                            b1.Property<Guid>("CompanyId")
                                .HasColumnType("uuid");

                            b1.Property<string>("AreaCode")
                                .HasMaxLength(4)
                                .HasColumnType("character varying(4)")
                                .HasColumnName("AreaCode");

                            b1.Property<string>("CelPhone")
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("CelPhone");

                            b1.Property<string>("Email")
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("Email");

                            b1.Property<string>("Phone")
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("Phone");

                            b1.HasKey("CompanyId");

                            b1.ToTable("Companies");

                            b1.WithOwner()
                                .HasForeignKey("CompanyId");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("ContactInfo")
                        .IsRequired();
                });

            modelBuilder.Entity("GADistribuidora.Domain.Entities.Employee", b =>
                {
                    b.HasOne("GADistribuidora.Domain.Entities.Company", "Company")
                        .WithMany("Employees")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("GADistribuidora.Domain.Entities.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("EmployeeId")
                                .HasColumnType("uuid");

                            b1.Property<int?>("BuildingNumber")
                                .HasColumnType("integer")
                                .HasColumnName("BuildingNumber");

                            b1.Property<string>("City")
                                .HasMaxLength(35)
                                .HasColumnType("character varying(35)")
                                .HasColumnName("City");

                            b1.Property<string>("Complement")
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("Complement");

                            b1.Property<string>("Country")
                                .HasMaxLength(35)
                                .HasColumnType("character varying(35)")
                                .HasColumnName("Country");

                            b1.Property<string>("Neighborhood")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("Neighborhood");

                            b1.Property<string>("PostalCode")
                                .HasMaxLength(8)
                                .HasColumnType("character varying(8)")
                                .HasColumnName("PostalCode");

                            b1.Property<string>("State")
                                .HasMaxLength(35)
                                .HasColumnType("character varying(35)")
                                .HasColumnName("State");

                            b1.Property<string>("Street")
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("Street");

                            b1.HasKey("EmployeeId");

                            b1.ToTable("Employees");

                            b1.WithOwner()
                                .HasForeignKey("EmployeeId");
                        });

                    b.OwnsOne("GADistribuidora.Domain.Entities.ValueObjects.ContactInfo", "ContactInfo", b1 =>
                        {
                            b1.Property<Guid>("EmployeeId")
                                .HasColumnType("uuid");

                            b1.Property<string>("AreaCode")
                                .HasMaxLength(4)
                                .HasColumnType("character varying(4)")
                                .HasColumnName("AreaCode");

                            b1.Property<string>("CelPhone")
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("CelPhone");

                            b1.Property<string>("Email")
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("Email");

                            b1.Property<string>("Phone")
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("Phone");

                            b1.HasKey("EmployeeId");

                            b1.ToTable("Employees");

                            b1.WithOwner()
                                .HasForeignKey("EmployeeId");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("ContactInfo")
                        .IsRequired();
                });

            modelBuilder.Entity("GADistribuidora.Domain.Entities.EmployeeItinerary", b =>
                {
                    b.HasOne("GADistribuidora.Domain.Entities.Employee", "Employee")
                        .WithMany("EmployeeItineraries")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GADistribuidora.Domain.Entities.Itinerary", "Itinerary")
                        .WithMany("EmployeeItineraries")
                        .HasForeignKey("ItineraryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Itinerary");
                });

            modelBuilder.Entity("GADistribuidora.Domain.Entities.Invoice", b =>
                {
                    b.HasOne("GADistribuidora.Domain.Entities.ShippingCompany", "ShippingCompany")
                        .WithMany("Invoices")
                        .HasForeignKey("ShippingCompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ShippingCompany");
                });

            modelBuilder.Entity("GADistribuidora.Domain.Entities.Itinerary", b =>
                {
                    b.HasOne("GADistribuidora.Domain.Entities.Vehicle", "Vehicle")
                        .WithMany("Itineraries")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("GADistribuidora.Domain.Entities.Lot", b =>
                {
                    b.HasOne("GADistribuidora.Domain.Entities.Product", "Product")
                        .WithMany("Lots")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("GADistribuidora.Domain.Entities.Order", b =>
                {
                    b.HasOne("GADistribuidora.Domain.Entities.Client", "Client")
                        .WithMany("Orders")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("GADistribuidora.Domain.Entities.Payment", b =>
                {
                    b.HasOne("GADistribuidora.Domain.Entities.Invoice", "Invoice")
                        .WithMany("Payments")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("GADistribuidora.Domain.Entities.Product", b =>
                {
                    b.HasOne("GADistribuidora.Domain.Entities.Company", "Company")
                        .WithMany("Products")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("GADistribuidora.Domain.Entities.ProductOrder", b =>
                {
                    b.HasOne("GADistribuidora.Domain.Entities.Order", "Order")
                        .WithMany("ProductOrders")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GADistribuidora.Domain.Entities.Product", "Product")
                        .WithMany("ProductOrders")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("GADistribuidora.Domain.Entities.Purchase", b =>
                {
                    b.HasOne("GADistribuidora.Domain.Entities.Supplier", "Supplier")
                        .WithMany("Purchases")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("GADistribuidora.Domain.Entities.PurchaseProduct", b =>
                {
                    b.HasOne("GADistribuidora.Domain.Entities.Product", "Product")
                        .WithMany("PurchaseProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GADistribuidora.Domain.Entities.Purchase", "Purchase")
                        .WithMany("PurchaseProducts")
                        .HasForeignKey("PurchaseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Purchase");
                });

            modelBuilder.Entity("GADistribuidora.Domain.Entities.RouteItinerary", b =>
                {
                    b.HasOne("GADistribuidora.Domain.Entities.Invoice", "Invoice")
                        .WithMany("RouteItineraries")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GADistribuidora.Domain.Entities.Itinerary", "Itinerary")
                        .WithMany("RouteItineraries")
                        .HasForeignKey("ItineraryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("Itinerary");
                });

            modelBuilder.Entity("GADistribuidora.Domain.Entities.Sale", b =>
                {
                    b.HasOne("GADistribuidora.Domain.Entities.Invoice", "Invoice")
                        .WithOne("Sale")
                        .HasForeignKey("GADistribuidora.Domain.Entities.Sale", "InvoiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GADistribuidora.Domain.Entities.Order", "Order")
                        .WithOne("Sale")
                        .HasForeignKey("GADistribuidora.Domain.Entities.Sale", "OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("GADistribuidora.Domain.Entities.ShippingCompany", b =>
                {
                    b.HasOne("GADistribuidora.Domain.Entities.Company", "Company")
                        .WithMany("ShippingCompanies")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("GADistribuidora.Domain.Entities.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("ShippingCompanyId")
                                .HasColumnType("uuid");

                            b1.Property<int?>("BuildingNumber")
                                .HasColumnType("integer")
                                .HasColumnName("BuildingNumber");

                            b1.Property<string>("City")
                                .HasMaxLength(35)
                                .HasColumnType("character varying(35)")
                                .HasColumnName("City");

                            b1.Property<string>("Complement")
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("Complement");

                            b1.Property<string>("Country")
                                .HasMaxLength(35)
                                .HasColumnType("character varying(35)")
                                .HasColumnName("Country");

                            b1.Property<string>("Neighborhood")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("Neighborhood");

                            b1.Property<string>("PostalCode")
                                .HasMaxLength(8)
                                .HasColumnType("character varying(8)")
                                .HasColumnName("PostalCode");

                            b1.Property<string>("State")
                                .HasMaxLength(35)
                                .HasColumnType("character varying(35)")
                                .HasColumnName("State");

                            b1.Property<string>("Street")
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("Street");

                            b1.HasKey("ShippingCompanyId");

                            b1.ToTable("ShippingCompanies");

                            b1.WithOwner()
                                .HasForeignKey("ShippingCompanyId");
                        });

                    b.OwnsOne("GADistribuidora.Domain.Entities.ValueObjects.ContactInfo", "ContactInfo", b1 =>
                        {
                            b1.Property<Guid>("ShippingCompanyId")
                                .HasColumnType("uuid");

                            b1.Property<string>("AreaCode")
                                .HasMaxLength(4)
                                .HasColumnType("character varying(4)")
                                .HasColumnName("AreaCode");

                            b1.Property<string>("CelPhone")
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("CelPhone");

                            b1.Property<string>("Email")
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("Email");

                            b1.Property<string>("Phone")
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("Phone");

                            b1.HasKey("ShippingCompanyId");

                            b1.ToTable("ShippingCompanies");

                            b1.WithOwner()
                                .HasForeignKey("ShippingCompanyId");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("ContactInfo")
                        .IsRequired();
                });

            modelBuilder.Entity("GADistribuidora.Domain.Entities.StockMovement", b =>
                {
                    b.HasOne("GADistribuidora.Domain.Entities.WarehouseLot", "WarehouseLot")
                        .WithMany("StockMovements")
                        .HasForeignKey("WarehouseLotId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("WarehouseLot");
                });

            modelBuilder.Entity("GADistribuidora.Domain.Entities.Supplier", b =>
                {
                    b.HasOne("GADistribuidora.Domain.Entities.Company", "Company")
                        .WithMany("Suppliers")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("GADistribuidora.Domain.Entities.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("SupplierId")
                                .HasColumnType("uuid");

                            b1.Property<int?>("BuildingNumber")
                                .HasColumnType("integer")
                                .HasColumnName("BuildingNumber");

                            b1.Property<string>("City")
                                .HasMaxLength(35)
                                .HasColumnType("character varying(35)")
                                .HasColumnName("City");

                            b1.Property<string>("Complement")
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("Complement");

                            b1.Property<string>("Country")
                                .HasMaxLength(35)
                                .HasColumnType("character varying(35)")
                                .HasColumnName("Country");

                            b1.Property<string>("Neighborhood")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("Neighborhood");

                            b1.Property<string>("PostalCode")
                                .HasMaxLength(8)
                                .HasColumnType("character varying(8)")
                                .HasColumnName("PostalCode");

                            b1.Property<string>("State")
                                .HasMaxLength(35)
                                .HasColumnType("character varying(35)")
                                .HasColumnName("State");

                            b1.Property<string>("Street")
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("Street");

                            b1.HasKey("SupplierId");

                            b1.ToTable("Suppliers");

                            b1.WithOwner()
                                .HasForeignKey("SupplierId");
                        });

                    b.OwnsOne("GADistribuidora.Domain.Entities.ValueObjects.ContactInfo", "ContactInfo", b1 =>
                        {
                            b1.Property<Guid>("SupplierId")
                                .HasColumnType("uuid");

                            b1.Property<string>("AreaCode")
                                .HasMaxLength(4)
                                .HasColumnType("character varying(4)")
                                .HasColumnName("AreaCode");

                            b1.Property<string>("CelPhone")
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("CelPhone");

                            b1.Property<string>("Email")
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("Email");

                            b1.Property<string>("Phone")
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("Phone");

                            b1.HasKey("SupplierId");

                            b1.ToTable("Suppliers");

                            b1.WithOwner()
                                .HasForeignKey("SupplierId");
                        });

                    b.Navigation("Address");

                    b.Navigation("Company");

                    b.Navigation("ContactInfo");
                });

            modelBuilder.Entity("GADistribuidora.Domain.Entities.User", b =>
                {
                    b.HasOne("GADistribuidora.Domain.Entities.Company", "Company")
                        .WithMany("Users")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("GADistribuidora.Domain.Entities.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<int?>("BuildingNumber")
                                .HasColumnType("integer")
                                .HasColumnName("BuildingNumber");

                            b1.Property<string>("City")
                                .HasMaxLength(35)
                                .HasColumnType("character varying(35)")
                                .HasColumnName("City");

                            b1.Property<string>("Complement")
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("Complement");

                            b1.Property<string>("Country")
                                .HasMaxLength(35)
                                .HasColumnType("character varying(35)")
                                .HasColumnName("Country");

                            b1.Property<string>("Neighborhood")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("Neighborhood");

                            b1.Property<string>("PostalCode")
                                .HasMaxLength(8)
                                .HasColumnType("character varying(8)")
                                .HasColumnName("PostalCode");

                            b1.Property<string>("State")
                                .HasMaxLength(35)
                                .HasColumnType("character varying(35)")
                                .HasColumnName("State");

                            b1.Property<string>("Street")
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("Street");

                            b1.HasKey("UserId");

                            b1.ToTable("AspNetUsers");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("GADistribuidora.Domain.Entities.ValueObjects.ContactInfo", "ContactInfo", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("AreaCode")
                                .HasMaxLength(4)
                                .HasColumnType("character varying(4)")
                                .HasColumnName("AreaCode");

                            b1.Property<string>("CelPhone")
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("CelPhone");

                            b1.Property<string>("Email")
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("Email");

                            b1.Property<string>("Phone")
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("Phone");

                            b1.HasKey("UserId");

                            b1.ToTable("AspNetUsers");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Address");

                    b.Navigation("Company");

                    b.Navigation("ContactInfo");
                });

            modelBuilder.Entity("GADistribuidora.Domain.Entities.Vehicle", b =>
                {
                    b.HasOne("GADistribuidora.Domain.Entities.Company", "Company")
                        .WithMany("Vehicles")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("GADistribuidora.Domain.Entities.Warehouse", b =>
                {
                    b.HasOne("GADistribuidora.Domain.Entities.Company", "Company")
                        .WithMany("Warehouses")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("GADistribuidora.Domain.Entities.WarehouseLot", b =>
                {
                    b.HasOne("GADistribuidora.Domain.Entities.Lot", "Lot")
                        .WithMany("WarehouseLots")
                        .HasForeignKey("LotId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GADistribuidora.Domain.Entities.Warehouse", "Warehouse")
                        .WithMany("WarehouseLots")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Lot");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("GADistribuidora.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("GADistribuidora.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GADistribuidora.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("GADistribuidora.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GADistribuidora.Domain.Entities.Client", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("GADistribuidora.Domain.Entities.Company", b =>
                {
                    b.Navigation("Clients");

                    b.Navigation("Employees");

                    b.Navigation("Products");

                    b.Navigation("ShippingCompanies");

                    b.Navigation("Suppliers");

                    b.Navigation("Users");

                    b.Navigation("Vehicles");

                    b.Navigation("Warehouses");
                });

            modelBuilder.Entity("GADistribuidora.Domain.Entities.Employee", b =>
                {
                    b.Navigation("EmployeeItineraries");
                });

            modelBuilder.Entity("GADistribuidora.Domain.Entities.Invoice", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("RouteItineraries");

                    b.Navigation("Sale")
                        .IsRequired();
                });

            modelBuilder.Entity("GADistribuidora.Domain.Entities.Itinerary", b =>
                {
                    b.Navigation("EmployeeItineraries");

                    b.Navigation("RouteItineraries");
                });

            modelBuilder.Entity("GADistribuidora.Domain.Entities.Lot", b =>
                {
                    b.Navigation("WarehouseLots");
                });

            modelBuilder.Entity("GADistribuidora.Domain.Entities.Order", b =>
                {
                    b.Navigation("ProductOrders");

                    b.Navigation("Sale")
                        .IsRequired();
                });

            modelBuilder.Entity("GADistribuidora.Domain.Entities.Product", b =>
                {
                    b.Navigation("Lots");

                    b.Navigation("ProductOrders");

                    b.Navigation("PurchaseProducts");
                });

            modelBuilder.Entity("GADistribuidora.Domain.Entities.Purchase", b =>
                {
                    b.Navigation("PurchaseProducts");
                });

            modelBuilder.Entity("GADistribuidora.Domain.Entities.ShippingCompany", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("GADistribuidora.Domain.Entities.Supplier", b =>
                {
                    b.Navigation("Purchases");
                });

            modelBuilder.Entity("GADistribuidora.Domain.Entities.Vehicle", b =>
                {
                    b.Navigation("Itineraries");
                });

            modelBuilder.Entity("GADistribuidora.Domain.Entities.Warehouse", b =>
                {
                    b.Navigation("WarehouseLots");
                });

            modelBuilder.Entity("GADistribuidora.Domain.Entities.WarehouseLot", b =>
                {
                    b.Navigation("StockMovements");
                });
#pragma warning restore 612, 618
        }
    }
}
